---
- name: Ensure docker volumes directories exist.
  file:
    path: "{{ item }}"
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0775'
  loop:
   - "{{ mongo_dir }}"
   - "{{ rabbit_data }}"

- name: Copy docker-compose file
  ansible.builtin.copy:
    src: docker-compose.yml
    dest: /swarm/
    owner: ubuntu
    group: ubuntu
    mode: '0644'

- name: Copy .env file
  ansible.builtin.copy:
    src: .env
    dest: /swarm/
    owner: ubuntu
    group: ubuntu
    mode: '0644'

- name: Copy swarmprom directory
  ansible.builtin.copy:
    src: swarmprom
    dest: /swarm/
    owner: ubuntu
    group: ubuntu
    mode: '0775'
    directory_mode: yes
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Copy deploy script
  ansible.builtin.copy:
    src: deploy.sh
    dest: /swarm/
    owner: ubuntu
    group: ubuntu
    mode: '0644'

- name: Check if "Swarm Mode" is enabled.
  shell: docker info
  changed_when: false
  register: docker_info
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Init "Swarm Mode" on the first manager.
  shell: docker swarm init
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
  when: "docker_info.stdout.find('Swarm: active') == -1
    and inventory_hostname == groups['docker_swarm_manager'][0]"
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Get the worker join-token.
  shell: docker swarm join-token -q worker
  changed_when: false
  register: docker_worker_token
  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
  delegate_facts: true
  when: "'docker_swarm_worker' in group_names"
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Get the manager join-token.
  shell: docker swarm join-token -q manager
  changed_when: false
  register: docker_manager_token
  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
  delegate_facts: true
  when: "'docker_swarm_manager' in group_names
    and inventory_hostname != groups['docker_swarm_manager'][0]"
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Declare the address of the first Swarm manager as a fact.
  set_fact:
    docker_manager_address: "{{ docker_swarm_addr }}:{{ docker_swarm_port }}"
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Distribute the fact containing address of the first Swarm manager.
  set_fact:
    docker_manager_address: "{{ hostvars[groups['docker_swarm_manager'][0]]['docker_manager_address'] }}"
  when: "inventory_hostname != groups['docker_swarm_manager'][0]"

- name: Join the pending Swarm worker nodes.
  shell: docker swarm join
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --token "{{ docker_worker_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: false
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and 'docker_swarm_worker' in group_names
    and 'docker_swarm_manager' not in group_names"
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Join the pending Swarm manager nodes.
  shell: docker swarm join
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --token "{{ docker_manager_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: false
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and 'docker_swarm_manager' in group_names
    and inventory_hostname != groups['docker_swarm_manager'][0]"
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Deploy swarm cluster
  shell:
    cmd: bash deploy.sh
    chdir: /swarm/
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"
